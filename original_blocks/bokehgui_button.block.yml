# auto-generated by grc.converter

id: variable_bokehgui_button
label: Bokeh GUI Button
category: '[Bokeh GUI]/Bokeh GUI Widgets'
flags:
- show_id

parameters:
-   id: label
    label: Label
    dtype: string
    hide: ${ ('none' if label else 'part') }
-   id: type
    label: Type
    dtype: enum
    default: bool
    options: [real, int, string, bool, raw]
    option_labels: [Float, Integer, String, Boolean, Any]
    option_attributes:
        conv: [float, int, str, bool, eval]
        str: [str, str, str, str, repr]
    hide: part
-   id: value
    label: Default Value
    dtype: ${ type }
    default: 'True'
-   id: block_id
    label: Block ID
    dtype: id
    default: my_block_0
-   id: function_name
    label: Function Name
    dtype: name
    default: get_number
-   id: function_args
    label: Function Args
    dtype: raw
    hide: ${ ('none' if function_args else 'part') }
value: ${ value }

templates:
    imports: import bokehgui
    var_make: "self.${id} = ${id} = ${value} \nself.${id}_args = ${id}_args = ${(function_args if function_args else None)}"
    make: |+
      <% obj = 'self' + ('.' + block_id if block_id else '') %>
      self.${id}_button = bokehgui.button(self.widget_lst, ${label if label!="''" else "'{}'".format(id)} + ": ")
      def ${id}_handler(new):
        print("Handling click")
        self.${id}_button.button.active = False
        if self.${id}_args is not None:
          self.set_${id}(${obj}.${function_name}(${function_args}))
        else:
          self.set_${id}(${obj}.${function_name}())
      self.${id}_button.add_callback(${id}_handler)
    callbacks:
    - self.set_${id}(${value})
    - self.${id}_args = ${function_args}

file_format: 1
