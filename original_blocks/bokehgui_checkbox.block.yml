# auto-generated by grc.converter

id: variable_bokehgui_checkbox
label: Bokeh GUI Checkbox
category: '[Bokeh GUI]/Bokeh GUI Widgets'
flags:
- show_id

parameters:
-   id: label
    label: Label
    dtype: string
    hide: ${ ('none' if label else 'part') }
-   id: type
    label: Type
    dtype: enum
    default: bool
    options: [real, int, string, bool, raw]
    option_labels: [Float, Integer, String, Boolean, Any]
    option_attributes:
        conv: [float, int, str, bool, eval]
        str: [str, str, str, str, repr]
    hide: part
-   id: value
    label: Default Value
    dtype: ${ type }
    default: 'True'
-   id: 'true'
    label: 'True'
    dtype: ${ type }
    default: 'True'
-   id: 'false'
    label: 'False'
    dtype: ${ type }
    default: 'False'
-   id: inline
    label: Inline
    dtype: enum
    default: 'True'
    options: ['True', 'False']
    hide: part
value: ${ value }

templates:
    imports: import bokehgui
    var_make: self.${id} = ${id} = ${value}
    make: |+
      _${id}_choices = {"[0]": ${true}, "[]": ${false}}
      _${id}_choices_inv = dict((_${id}_choices[k],[0] if k == "[0]" else []) for k in _${id}_choices.keys())
      % if (value == true or value == false):
      self.${id}_checkbox = bokehgui.checkbox(self.widget_lst, _${id}_choices_inv[${value}], ${label if label!="''" else "'{}'".format(id)} + ": ", inline = ${inline})
      % else:
      self.${id}_checkbox = bokehgui.checkbox(self.widget_lst, _${id}_choices_inv[${false}], ${label if label!="''" else "'{}'".format(id)} + ": ", inline = ${inline})
      % endif
      self.${id}_checkbox.add_callback(
        lambda new: self.set_${id}(${type.conv}(_${id}_choices[str(new)])))
    callbacks:
    - self.set_${id}(${value})

file_format: 1
