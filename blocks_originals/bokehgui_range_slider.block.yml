# auto-generated by grc.converter

id: variable_bokehgui_range_slider
label: Bokeh GUI Range Slider
category: '[Bokeh GUI]/Bokeh GUI Widgets'
flags:
- show_id

parameters:
-   id: label
    label: Label
    dtype: string
    hide: ${ ('none' if label else 'part') }
-   id: type
    label: Type
    dtype: enum
    default: int_vector
    options: [real_vector, int_vector]
    option_labels: [Float, Integer]
    option_attributes:
        base_type: [real, int]
        conv: [eng_notation.str_to_num, int]
        str: [eng_notation.num_to_str, str]
    hide: part
-   id: start
    label: Start
    dtype: ${ type.base_type }
    default: '0'
-   id: end
    label: End
    dtype: ${ type.base_type }
    default: '10'
-   id: step
    label: Step
    dtype: ${ type.base_type }
    default: '1'
    hide: ${ ('all' if type == 'int_vector' else 'part') }
-   id: value
    label: Default Range
    dtype: ${ type }
    default: (0, 10)
-   id: throttle
    label: Throttle
    dtype: real
    default: '1'
value: ${ value }
asserts:
- ${ len(value) == 2 }
- ${ start < end }
- ${ value[0] < value[1] }
- ${ start <= value[0] }
- ${ value[1] <= end }

templates:
    imports: |-
        from gnuradio import eng_notation
        import bokehgui
    var_make: self.${id} = ${id} = ${value}
    make: |+
      self.${id}_slider = bokehgui.range_slider(self.widget_lst, ${label if label!="''" else "'{}'".format(id)} +":", ${start}, ${end}, ${step}, ${throttle}, ${value})
      self.${id}_slider.add_callback(lambda attr, old, new: self.set_${id}(new))

    callbacks:
    - self.set_${id}(${value})
    - self.${id}_slider.set_value(${value})

file_format: 1
