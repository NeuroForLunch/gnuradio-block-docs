# auto-generated by grc.converter

id: fsk_burst_extractor_hier
label: Burst Extractor Hier
category: '[Core]/Analysis'

parameters:
-   id: samp_rate
    label: Sample Rate [Hz]
    dtype: float
    default: samp_rate
    hide: none
-   id: center_freq
    label: Center Frequency [Hz]
    dtype: float
    default: center_freq
    hide: none
-   id: fft_size
    label: FFT Size
    dtype: int
    default: '256'
    hide: none

-   id: threshold
    label: Threshold [dB]
    category: Burst Bounds
    dtype: real
    default: '6'
    hide: none
-   id: burst_width
    label: Burst Width [Hz]
    category: Burst Bounds
    dtype: int
    default: int(500e3)
    hide: part
-   id: hist_time
    label: History Time [s]
    category: Burst Bounds
    dtype: real
    default: '0.004'
    hide: part
-   id: lookahead_time
    label: Lookahead Time [s]
    category: Burst Bounds
    dtype: real
    default: '0.0005'
    hide: part
-   id: max_burst_time
    label: Max Burst Time [s]
    category: Burst Bounds
    dtype: real
    default: '0.5'
    hide: part
-   id: min_burst_time
    label: Min Burst Time [s]
    category: Burst Bounds
    dtype: real
    default: '0.001'
    hide: part
-   id: pre_burst_time
    label: Pre Burst Time [s]
    category: Burst Bounds
    dtype: real
    default: '0.00008'
    hide: part
-   id: post_burst_time
    label: Post Burst Time [s]
    category: Burst Bounds
    dtype: real
    default: '0.00008'
    hide: part

-   id: decimation
    label: Decimation
    category: Filter/Decimate
    dtype: int
    default: '20'
    hide: none
-   id: n_threads
    label: N Threads Downmix
    category: Filter/Decimate
    dtype: int
    default: '3'
    hide: part
-   id: output_cutoff
    label: Cutoff [cycles/samp]
    category: Filter/Decimate
    dtype: real
    default: '0.25'
    hide: part
-   id: output_trans_width
    label: Trans Width [cycles/samp]
    category: Filter/Decimate
    dtype: real
    default: '0.1'
    hide: part
-   id: output_attenuation
    label: Output Attenuation
    category: Filter/Decimate
    dtype: real
    default: '40'
    hide: part

-   id: cf_method
    label: Method
    category: Freq. Est.
    dtype: int
    default: fhss_utils.RMS
    options: [fhss_utils.RMS, fhss_utils.HALF_POWER, fhss_utils.COERCE]
    option_labels: [RMS, Half-Power, Coerce Only]
    hide: part
-   id: channel_freqs
    label: Channel Center Freqs
    category: Freq. Est.
    dtype: real_vector
    default: '[]'
    hide: part


inputs:
-   domain: stream
    dtype: complex
    vlen: 1

outputs:
-   domain: message
    id: pdu_out

asserts:
- ${ decimation % 2 == 0 }

templates:
    imports: import fhss_utils
    make: |-
        fhss_utils.fsk_burst_extractor_hier(
            burst_width=${burst_width},
            center_freq=${center_freq},
            decimation=${decimation},
            fft_size=${fft_size},
            hist_time=${hist_time},
            lookahead_time=${lookahead_time},
            max_burst_time=${max_burst_time},
            min_burst_time=${min_burst_time},
            output_attenuation=${output_attenuation},
            output_cutoff=${output_cutoff},
            output_trans_width=${output_trans_width},
            post_burst_time=${post_burst_time},
            pre_burst_time=${pre_burst_time},
            samp_rate=int(${samp_rate}),
            threshold=${threshold},
            cf_method=${cf_method},
            channel_freqs=${channel_freqs},
            n_threads=${n_threads}
        )
    callbacks:
    - set_channel_freqs(${channel_freqs})
    - set_cf_method(${cf_method})

documentation: |-
    ######################################################
    ######################################################
    This GNU Radio module contains tools for processing frequency hopping spread spectrum signals. Blocks derived from the gr-iridium project exist to detect narrowband bursts within wideband signals and downconvert and center them. Metadata is tracked through this process enabling reconstruction of where the bursts originated in time and frequency. Another set of blocks exists to baseband all bursts within a high fidelity signal capture which is useful for reverse engineering of FHSS datasets.

    ### General Concept of High Fidelity FHSS Signal Dehopping

    The dataset dehopper blocks were designed to quickly allow for good accuracy dehopping of high fidelity FHSS FSK recordings. This is accomplished by a two-stage dehopping process by which a coarse FFT is taken and peak values are taken by a simple sample-and-hold block when an amplitude threshold is crossed, then a second stage does fine frequency correction by taking an instantaneous frequency average. This works well for FSK signals but requires some work for other signals.


    Simple FHSS Dehopping Flowgraph: gr-fhss/docs/figures/fhss_dehopper.png
    ######################################################
    ######################################################

file_format: 1
